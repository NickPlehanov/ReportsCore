// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ReportsCore.Models;

namespace ReportsCore.Context
{
    public partial class Vityaz_MSCRMContext : DbContext
    {
        public Vityaz_MSCRMContext()
        {
        }

        public Vityaz_MSCRMContext(DbContextOptions<Vityaz_MSCRMContext> options)
            : base(options)
        {
        }

        public virtual DbSet<NewAlarmBase> NewAlarmBase { get; set; }
        public virtual DbSet<NewAlarmExtensionBase> NewAlarmExtensionBase { get; set; }
        public virtual DbSet<NewAndromedaBase> NewAndromedaBase { get; set; }
        public virtual DbSet<NewAndromedaExtensionBase> NewAndromedaExtensionBase { get; set; }
        public virtual DbSet<NewGuardObjectBase> NewGuardObjectBase { get; set; }
        public virtual DbSet<NewGuardObjectExtensionBase> NewGuardObjectExtensionBase { get; set; }
        public virtual DbSet<NewGuardObjectHistory> NewGuardObjectHistory { get; set; }
        public virtual DbSet<SystemUserBase> SystemUserBase { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=sql-service;Initial Catalog=vityaz_MSCRM;User ID=admin;Password=111111");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<NewAlarmBase>(entity =>
            {
                entity.HasIndex(e => e.OrganizationId)
                    .HasName("ndx_Security");

                entity.HasIndex(e => e.VersionNumber)
                    .HasName("ndx_Sync");

                entity.HasIndex(e => new { e.DeletionStateCode, e.Statecode, e.Statuscode })
                    .HasName("ndx_Core");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedOn, e.ModifiedBy, e.ModifiedOn })
                    .HasName("ndx_Auditing");

                entity.Property(e => e.NewAlarmId).ValueGeneratedNever();

                entity.Property(e => e.VersionNumber)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<NewAlarmExtensionBase>(entity =>
            {
                entity.Property(e => e.NewAlarmId).ValueGeneratedNever();

                entity.HasOne(d => d.NewAlarm)
                    .WithOne(p => p.NewAlarmExtensionBase)
                    .HasForeignKey<NewAlarmExtensionBase>(d => d.NewAlarmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_New_alarmExtensionBase_New_alarmBase");

                entity.HasOne(d => d.NewAndromedaAlarmNavigation)
                    .WithMany(p => p.NewAlarmExtensionBase)
                    .HasForeignKey(d => d.NewAndromedaAlarm)
                    .HasConstraintName("new_andromeda_alarm");
            });

            modelBuilder.Entity<NewAndromedaBase>(entity =>
            {
                entity.HasIndex(e => e.VersionNumber)
                    .HasName("ndx_Sync");

                entity.HasIndex(e => new { e.OwningUser, e.OwningBusinessUnit })
                    .HasName("ndx_Security");

                entity.HasIndex(e => new { e.DeletionStateCode, e.Statecode, e.Statuscode })
                    .HasName("ndx_Core");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedOn, e.ModifiedBy, e.ModifiedOn })
                    .HasName("ndx_Auditing");

                entity.Property(e => e.NewAndromedaId).ValueGeneratedNever();

                entity.Property(e => e.VersionNumber)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.OwningUserNavigation)
                    .WithMany(p => p.NewAndromedaBase)
                    .HasForeignKey(d => d.OwningUser)
                    .HasConstraintName("user_new_andromeda");
            });

            modelBuilder.Entity<NewAndromedaExtensionBase>(entity =>
            {
                entity.HasIndex(e => e.NewContactAndromeda)
                    .HasName("ndx_for_cascaderelationship_new_contact_new_andromeda");

                entity.Property(e => e.NewAndromedaId).ValueGeneratedNever();

                entity.HasOne(d => d.NewAndromeda)
                    .WithOne(p => p.NewAndromedaExtensionBase)
                    .HasForeignKey<NewAndromedaExtensionBase>(d => d.NewAndromedaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_New_andromedaExtensionBase_New_andromedaBase");

                entity.HasOne(d => d.NewPostNavigation)
                    .WithMany(p => p.NewAndromedaExtensionBase)
                    .HasForeignKey(d => d.NewPost)
                    .HasConstraintName("new_new_alarm_new_andromeda");
            });

            modelBuilder.Entity<NewGuardObjectBase>(entity =>
            {
                entity.HasIndex(e => e.VersionNumber)
                    .HasName("ndx_Sync");

                entity.HasIndex(e => new { e.OwningUser, e.OwningBusinessUnit })
                    .HasName("ndx_Security");

                entity.HasIndex(e => new { e.DeletionStateCode, e.Statecode, e.Statuscode })
                    .HasName("ndx_Core");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedOn, e.ModifiedBy, e.ModifiedOn })
                    .HasName("ndx_Auditing");

                entity.Property(e => e.NewGuardObjectId).ValueGeneratedNever();

                entity.Property(e => e.VersionNumber)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.OwningUserNavigation)
                    .WithMany(p => p.NewGuardObjectBase)
                    .HasForeignKey(d => d.OwningUser)
                    .HasConstraintName("user_new_guard_object");
            });

            modelBuilder.Entity<NewGuardObjectExtensionBase>(entity =>
            {
                entity.HasIndex(e => e.NewAccount)
                    .HasName("ndx_for_cascaderelationship_new_account_new_guard_object");

                entity.HasIndex(e => e.NewAccountAgent)
                    .HasName("ndx_for_cascaderelationship_new_account_agent_new_guard_object");

                entity.HasIndex(e => e.NewContact)
                    .HasName("ndx_for_cascaderelationship_new_contact_new_guard_object");

                entity.HasIndex(e => e.NewReactionAccount)
                    .HasName("ndx_for_cascaderelationship_new_account_new_guard_object_reaction");

                entity.HasIndex(e => e.NewTechserviceAccount)
                    .HasName("ndx_for_cascaderelationship_new_account_new_guard_object_techservice");

                entity.HasIndex(e => e.NewUvoUnit)
                    .HasName("ndx_for_cascaderelationship_new_account_new_guard_object_uvo_unit");

                entity.Property(e => e.NewGuardObjectId).ValueGeneratedNever();

                entity.HasOne(d => d.NewCuratorNavigation)
                    .WithMany(p => p.NewGuardObjectExtensionBaseNewCuratorNavigation)
                    .HasForeignKey(d => d.NewCurator)
                    .HasConstraintName("new_systemuser_new_guard_object");

                entity.HasOne(d => d.NewCuratorMountNavigation)
                    .WithMany(p => p.NewGuardObjectExtensionBaseNewCuratorMountNavigation)
                    .HasForeignKey(d => d.NewCuratorMount)
                    .HasConstraintName("new_new_guard_object_new_guard_object");

                entity.HasOne(d => d.NewCuratorUserMountNavigation)
                    .WithMany(p => p.NewGuardObjectExtensionBaseNewCuratorUserMountNavigation)
                    .HasForeignKey(d => d.NewCuratorUserMount)
                    .HasConstraintName("new_systemuser_new_guard_object_mount");

                entity.HasOne(d => d.NewGuardObject)
                    .WithOne(p => p.NewGuardObjectExtensionBaseNewGuardObject)
                    .HasForeignKey<NewGuardObjectExtensionBase>(d => d.NewGuardObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_New_guard_objectExtensionBase_New_guard_objectBase");

                entity.HasOne(d => d.NewInspectorNavigation)
                    .WithMany(p => p.NewGuardObjectExtensionBaseNewInspectorNavigation)
                    .HasForeignKey(d => d.NewInspector)
                    .HasConstraintName("new_systemuser_guard_object");

                entity.HasOne(d => d.NewRetentionNavigation)
                    .WithMany(p => p.NewGuardObjectExtensionBaseNewRetentionNavigation)
                    .HasForeignKey(d => d.NewRetention)
                    .HasConstraintName("new_systemuser_retention_new_guard_object");
            });

            modelBuilder.Entity<NewGuardObjectHistory>(entity =>
            {
                entity.HasKey(e => e.ModifiedOn)
                    .HasName("PK_ModifiedOn");
            });

            modelBuilder.Entity<SystemUserBase>(entity =>
            {
                entity.HasKey(e => e.SystemUserId)
                    .HasName("cndx_PrimaryKey_SystemUser");

                entity.HasIndex(e => e.ActiveDirectoryGuid)
                    .HasName("UQ_SystemUserBaseActiveDirectoryGuid")
                    .IsUnique();

                entity.HasIndex(e => e.BusinessUnitId)
                    .HasName("ndx_Security");

                entity.HasIndex(e => e.CalendarId)
                    .HasName("ndx_for_cascaderelationship_calendar_system_users");

                entity.HasIndex(e => e.DeletionStateCode)
                    .HasName("ndx_Core");

                entity.HasIndex(e => e.InternalEmailAddress)
                    .HasName("ndx_Email_1");

                entity.HasIndex(e => e.MobileAlertEmail)
                    .HasName("ndx_Email_3");

                entity.HasIndex(e => e.ParentSystemUserId)
                    .HasName("ndx_for_cascaderelationship_user_parent_user");

                entity.HasIndex(e => e.PersonalEmailAddress)
                    .HasName("ndx_Email_2");

                entity.HasIndex(e => e.SiteId)
                    .HasName("ndx_for_cascaderelationship_site_system_users");

                entity.HasIndex(e => e.TerritoryId)
                    .HasName("ndx_for_cascaderelationship_territory_system_users");

                entity.HasIndex(e => e.VersionNumber)
                    .HasName("ndx_Sync_VersionNumber")
                    .IsUnique();

                entity.HasIndex(e => new { e.FullName, e.YomiFullName })
                    .HasName("ndx_Cover");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedOn, e.ModifiedBy, e.ModifiedOn })
                    .HasName("ndx_Auditing");

                entity.Property(e => e.SystemUserId).ValueGeneratedNever();

                entity.Property(e => e.IncomingEmailDeliveryMethod).HasDefaultValueSql("((1))");

                entity.Property(e => e.InviteStatusCode).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsActiveDirectoryUser).HasDefaultValueSql("((1))");

                entity.Property(e => e.OutgoingEmailDeliveryMethod).HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionNumber)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ParentSystemUser)
                    .WithMany(p => p.InverseParentSystemUser)
                    .HasForeignKey(d => d.ParentSystemUserId)
                    .HasConstraintName("user_parent_user");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}